// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TFBackEnd.Api.Data;

namespace TFBackEnd.Api.Migrations
{
    [DbContext(typeof(TFBackEndApiContext))]
    partial class TFBackEndApiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.12");

            modelBuilder.Entity("SensorTelefono", b =>
                {
                    b.Property<int>("SensoresId")
                        .HasColumnType("int");

                    b.Property<int>("TelefonosId")
                        .HasColumnType("int");

                    b.HasKey("SensoresId", "TelefonosId");

                    b.HasIndex("TelefonosId");

                    b.ToTable("SensorTelefono");
                });

            modelBuilder.Entity("TFBackEnd.Api.Models.App", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Apps");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Whatsapp"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Facebook"
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "Instagran"
                        },
                        new
                        {
                            Id = 4,
                            Nombre = "Telegran"
                        });
                });

            modelBuilder.Entity("TFBackEnd.Api.Models.Instalacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AppId")
                        .HasColumnType("int");

                    b.Property<bool>("Exitosa")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<int>("OperarioId")
                        .HasColumnType("int");

                    b.Property<int>("TelefonoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppId");

                    b.HasIndex("OperarioId");

                    b.HasIndex("TelefonoId");

                    b.ToTable("Instalaciones");
                });

            modelBuilder.Entity("TFBackEnd.Api.Models.Operario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Apellido")
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Operarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Apellido = "Testing",
                            Nombre = "Testing"
                        },
                        new
                        {
                            Id = 2,
                            Apellido = "Testing 2",
                            Nombre = "Testing 2"
                        },
                        new
                        {
                            Id = 3,
                            Apellido = "Testing 3",
                            Nombre = "Testing 3"
                        });
                });

            modelBuilder.Entity("TFBackEnd.Api.Models.Sensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sensor");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = " Giroscopio"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = " Movimiento"
                        },
                        new
                        {
                            Id = 3,
                            Nombre = " Podometro"
                        },
                        new
                        {
                            Id = 4,
                            Nombre = " Proximidad"
                        });
                });

            modelBuilder.Entity("TFBackEnd.Api.Models.Telefono", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Marca")
                        .HasColumnType("text");

                    b.Property<string>("Modelo")
                        .HasColumnType("text");

                    b.Property<float>("Precio")
                        .HasColumnType("float");

                    b.Property<string>("RutaFoto")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Telefonos");
                });

            modelBuilder.Entity("SensorTelefono", b =>
                {
                    b.HasOne("TFBackEnd.Api.Models.Sensor", null)
                        .WithMany()
                        .HasForeignKey("SensoresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TFBackEnd.Api.Models.Telefono", null)
                        .WithMany()
                        .HasForeignKey("TelefonosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TFBackEnd.Api.Models.Instalacion", b =>
                {
                    b.HasOne("TFBackEnd.Api.Models.App", "App")
                        .WithMany("Instalaciones")
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TFBackEnd.Api.Models.Operario", "Operario")
                        .WithMany("Instalaciones")
                        .HasForeignKey("OperarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TFBackEnd.Api.Models.Telefono", "Telefono")
                        .WithMany("Instalaciones")
                        .HasForeignKey("TelefonoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("App");

                    b.Navigation("Operario");

                    b.Navigation("Telefono");
                });

            modelBuilder.Entity("TFBackEnd.Api.Models.App", b =>
                {
                    b.Navigation("Instalaciones");
                });

            modelBuilder.Entity("TFBackEnd.Api.Models.Operario", b =>
                {
                    b.Navigation("Instalaciones");
                });

            modelBuilder.Entity("TFBackEnd.Api.Models.Telefono", b =>
                {
                    b.Navigation("Instalaciones");
                });
#pragma warning restore 612, 618
        }
    }
}
